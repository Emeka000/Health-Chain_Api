version: '3.8'

services:
  # Main Hospital Management Application
  hospital-app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: hospital-management-app
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://hospital_user:${DB_PASSWORD}@postgres:5432/hospital_db?sslmode=require
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - TLS_CERT_PATH=/app/certs/server.crt
      - TLS_KEY_PATH=/app/certs/server.key
    volumes:
      - ./certs:/app/certs:ro
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - hospital-network
    healthcheck:
      test: ["CMD", "curl", "-f", "https://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL with Medical Data Encryption
  postgres:
    image: postgres:15-alpine
    container_name: hospital-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=hospital_db
      - POSTGRES_USER=hospital_user
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256 --auth-local=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d:ro
      - ./postgres/certs:/var/lib/postgresql/certs:ro
      - ./postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    ports:
      - "5432:5432"
    command: >
      postgres
      -c ssl=on
      -c ssl_cert_file=/var/lib/postgresql/certs/server.crt
      -c ssl_key_file=/var/lib/postgresql/certs/server.key
      -c ssl_ca_file=/var/lib/postgresql/certs/ca.crt
      -c config_file=/etc/postgresql/postgresql.conf
      -c shared_preload_libraries=pg_stat_statements
      -c log_statement=all
      -c log_min_duration_statement=1000
    networks:
      - hospital-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U hospital_user -d hospital_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Medical Session Management
  redis:
    image: redis:7-alpine
    container_name: hospital-redis
    restart: unless-stopped
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --appendonly yes
      --appendfsync everysec
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 60
      --timeout 0
      --tcp-backlog 511
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/etc/redis/redis.conf:ro
    ports:
      - "6379:6379"
    networks:
      - hospital-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Database Backup Service
  postgres-backup:
    image: postgres:15-alpine
    container_name: hospital-backup
    restart: unless-stopped
    environment:
      - PGPASSWORD=${DB_PASSWORD}
      - BACKUP_RETENTION_DAYS=30
      - BACKUP_SCHEDULE=0 2 * * *
    volumes:
      - postgres_backups:/backups
      - ./scripts/backup.sh:/usr/local/bin/backup.sh:ro
    command: >
      sh -c "
        apk add --no-cache dcron &&
        echo '0 2 * * * /usr/local/bin/backup.sh' | crontab - &&
        crond -f -d 8
      "
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - hospital-network

  # Redis Backup Service
  redis-backup:
    image: redis:7-alpine
    container_name: hospital-redis-backup
    restart: unless-stopped
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - BACKUP_RETENTION_DAYS=7
    volumes:
      - redis_backups:/backups
      - ./scripts/redis-backup.sh:/usr/local/bin/redis-backup.sh:ro
    command: >
      sh -c "
        apk add --no-cache dcron &&
        echo '0 */6 * * * /usr/local/bin/redis-backup.sh' | crontab - &&
        crond -f -d 8
      "
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - hospital-network

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: hospital-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    networks:
      - hospital-network

  # Grafana for Medical System Monitoring
  grafana:
    image: grafana/grafana:latest
    container_name: hospital-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_SECURITY_COOKIE_SECURE=true
      - GF_SECURITY_STRICT_TRANSPORT_SECURITY=true
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - hospital-network

  # AlertManager for Medical-Grade Alerts
  alertmanager:
    image: prom/alertmanager:latest
    container_name: hospital-alertmanager
    restart: unless-stopped
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    networks:
      - hospital-network

  # Node Exporter for System Metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: hospital-node-exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - hospital-network

  # Postgres Exporter for Database Metrics
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: hospital-postgres-exporter
    restart: unless-stopped
    environment:
      - DATA_SOURCE_NAME=postgresql://hospital_user:${DB_PASSWORD}@postgres:5432/hospital_db?sslmode=require
    ports:
      - "9187:9187"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - hospital-network

  # Redis Exporter for Cache Metrics
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: hospital-redis-exporter
    restart: unless-stopped
    environment:
      - REDIS_ADDR=redis://redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    ports:
      - "9121:9121"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - hospital-network

  # Nginx Reverse Proxy with SSL Termination
  nginx:
    image: nginx:alpine
    container_name: hospital-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/hospital.conf:/etc/nginx/conf.d/default.conf:ro
      - ./certs:/etc/nginx/certs:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - hospital-app
    networks:
      - hospital-network

networks:
  hospital-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/hospital/data/postgres
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/hospital/data/redis
  postgres_backups:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/hospital/backups/postgres
  redis_backups:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/hospital/backups/redis
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  alertmanager_data:
    driver: local
